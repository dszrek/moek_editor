# -*- coding: utf-8 -*-
"""
/***************************************************************************
 MoekEditorDockWidget
                                 A QGIS plugin
 Wtyczka do obsługi systemu MOEK (PIG-PIB).
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-05-12
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Dominik Szrek / PIG-PIB
        email                : dszr@pgi.gov.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from PyQt5.QtGui import QIcon, QPixmap

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'moek_editor_dockwidget_base.ui'))
ICON_PATH = os.path.dirname(os.path.realpath(__file__)) + os.path.sep + 'ui' + os.path.sep

class MoekEditorDockWidget(QtWidgets.QDockWidget, FORM_CLASS):  #type: ignore

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(MoekEditorDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.__button_init()

    def __button_init(self):
        """Konfiguracja przycisków."""
        self.button_cfg(self.btn_sel,'vn_sel.png', checkable=True, tooltip=u'wybierz pole')
        self.button_cfg(self.btn_zoom,'vn_zoom.png', checkable=False, tooltip=u'przybliż do pola')
        self.button_cfg(self.btn_done,'vn_doneT.png', checkable=False, tooltip=u'oznacz jako "SPRAWDZONE"')
        self.button_cfg(self.btn_doneF,'vn_doneTf.png', checkable=False, tooltip=u'oznacz jako "SPRAWDZONE" i idź do następnego')

    def button_cfg(self, btn, icon_name, **kwargs):
        """Konfiguracja przycisków."""
        icon = QIcon()
        icon.addPixmap(QPixmap(ICON_PATH + icon_name))
        btn.setIcon(icon)
        if kwargs:
            for key, val in kwargs.items():
                if key == "enabled":
                    btn.setEnabled(val)
                if key == "checkable":
                    btn.setCheckable(val)
                if key == "tooltip":
                    btn.setToolTip(val)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
